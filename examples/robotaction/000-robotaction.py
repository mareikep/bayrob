import datetime
import os
from random import randint

import dnutils
import pandas as pd
from calo.utils.utils import recent_example
from jpt.distributions import Gaussian
from matplotlib import pyplot as plt, patches

from calo.logs.logs import init_loggers
from calo.models.action import Move
from calo.models.world import GridAgent, Grid
from calo.utils import locs
from calo.utils.constants import FILESTRFMT, calologger
from jpt import infer_from_dataframe, JPT

logger = dnutils.getlogger(calologger, level=dnutils.DEBUG)

# params
RUNS = 1000
NUMACTIONS = 100
FACTOR = 0.001
COLLIDED = True  # use collided (symbolic) variable


def robot_pos_random(dt):
    logger.debug('Generating random robot data...')

    # init agent and world
    w = Grid()
    w.obstacle(25, 25, 50, 50)
    w.obstacle(-10, 10, 0, 40)
    w.obstacle(50, -30, 20, 10)
    w.obstacle(-75, -10, -50, -40)
    w.obstacle(-25, -50, -15, -75)

    gaussian_deg = Gaussian(0, 360)

    fig, ax = plt.subplots(num=1, clear=True)

    # write sample data for MOVEFORWARD and TURN action of robot (absolute positions)
    for j in range(RUNS):
        poses = []  # for plotting
        turns = []

        # init agent at random position
        a = GridAgent(world=w)
        a.init_random()

        # for each run and action select random
        for _ in range(NUMACTIONS):
            deg = gaussian_deg.sample(1)
            turns.append(a.dir + (deg,))
            Move.turndeg(a, deg)

            steps = randint(1, 10)
            for _ in range(steps):
                poses.append(a.pos + a.dir + (1, a.collided))
                Move.moveforward(a, 1)

        poses.append(a.pos + a.dir + (0, a.collided))
        turns.append(a.dir + (0,))

        df_moveforward = pd.DataFrame(poses, columns=['x', 'y', 'xdir', 'ydir', 'numsteps', 'collided'])
        df_moveforward.to_csv(os.path.join(locs.examples, 'robotaction', dt, 'data', f'{j}-MOVEFORWARD.csv'), index=False)

        df_turn = pd.DataFrame(turns, columns=['xdir', 'ydir', 'angle'])
        df_turn.to_csv(os.path.join(locs.examples, 'robotaction', dt, 'data', f'{j}-TURN.csv'), index=False)

        # plot trajectories and highlight start and end points
        ax.plot(df_moveforward['x'], df_moveforward['y'], c='cornflowerblue')
        ax.scatter(df_moveforward['x'].iloc[0], df_moveforward['y'].iloc[0], marker='+', c='green', zorder=1000)
        ax.scatter(df_moveforward['x'].iloc[-1], df_moveforward['y'].iloc[-1], marker='+', c='red', zorder=1000)

        # TODO: remove to save storage space and prevent overload of produced images
        plt.savefig(os.path.join(locs.examples, 'robotaction', dt, 'plots', f'{j}-MOVE.png'), format="png")

    # plot annotated rectangles representing the obstacles
    for i, o in enumerate(w.obstacles):
        ax.add_patch(patches.Rectangle(
            (
                o[0],
                o[1]
            ),
            width=o[2] - o[0],
            height=o[3] - o[1],
            linewidth=1,
            color='green',
            alpha=.2)
        )
        ax.annotate(
            f'O{i+1}',
            (
                o[0] + (o[2] - o[0]) / 2,
                o[1] + (o[3] - o[1]) / 2
            )
        )

    logger.debug('...done! Saving plot...')

    # figure settings
    fig.suptitle(f'{RUNS} runs; {NUMACTIONS} actions per run')
    fig.canvas.manager.set_window_title(f'ALL-MOVE.png')
    plt.legend()
    plt.grid()

    # save and show
    plt.savefig(os.path.join(locs.examples, 'robotaction', dt, 'plots', f'ALL-MOVE.png'), format="png")
    plt.show()


def data_curation(dt):
    logger.debug('curating robot MOVEFORWARD data...')

    # read position data files generated by test_robot_pos and generate large file containing deltas
    # (position-independent)

    if COLLIDED:
        data_moveforward = pd.DataFrame(columns=['xdir_in', 'ydir_in', 'x_in', 'y_in', 'x_out', 'y_out', 'collided'])
    else:
        data_moveforward = pd.DataFrame(columns=['xdir_in', 'ydir_in', 'x_in', 'y_in', 'x_out', 'y_out'])

    for i in range(RUNS):
        with open(os.path.join(locs.examples, 'robotaction', dt, 'data', f'{i}-MOVEFORWARD.csv'), 'r') as f:
            d = pd.read_csv(f, delimiter=',', header=0)
            for idx, row in d.iterrows():
                if idx == d.index.max(): break

                if COLLIDED:
                    data_moveforward.loc[idx + i * RUNS] = [
                        row['xdir'],
                        row['ydir'],
                        row['x'],
                        row['y'],
                        d.iloc[idx + 1]['x'],
                        d.iloc[idx + 1]['y'],
                        row['collided']
                    ]
                else:
                    data_moveforward.loc[idx + i * RUNS] = [
                        row['xdir'],
                        row['ydir'],
                        row['x'],
                        row['y'],
                        d.iloc[idx + 1]['x'],
                        d.iloc[idx + 1]['y']
                    ]

    data_moveforward.to_csv(os.path.join(locs.examples, 'robotaction', dt, 'data', f'ALL-MOVEFORWARD.csv'), index=False)

    logger.debug('...done! curating robot TURN data...')
    data_turn = pd.DataFrame(columns=['xdir_in', 'ydir_in', 'xdir_out', 'ydir_out', 'angle'])
    for i in range(RUNS):
        with open(os.path.join(locs.examples, 'robotaction', dt, 'data', f'{i}-TURN.csv'), 'r') as f:
            d = pd.read_csv(f, delimiter=',', header=0)
            for idx, row in d.iterrows():
                if idx == d.index.max(): continue
                # store data of two consecuting steps
                data_turn.loc[idx + i * RUNS] = [
                    row['xdir'],
                    row['ydir'],
                    d.iloc[idx + 1]['xdir'],
                    d.iloc[idx + 1]['ydir'],
                    row['angle']
                ]

    data_turn.to_csv(os.path.join(locs.examples, 'robotaction', dt, 'data', f'ALL-TURN.csv'), index=False)
    logger.debug('...done!')


def learn_jpt_moveforward(dt):
    logger.debug('learning MOVEFORWARD JPT...')

    # learn discriminative JPT from data generated by test_data_curation for MOVEFORWARD
    data_moveforward = pd.read_csv(
        os.path.join(locs.examples, 'robotaction', dt, 'data', f'ALL-MOVEFORWARD.csv'),
        delimiter=',',
        header=0
    )
    movevars = infer_from_dataframe(data_moveforward, scale_numeric_types=False)

    jpt_mf = JPT(variables=movevars, targets=movevars[4:], min_samples_leaf=FACTOR)

    jpt_mf.learn(data_moveforward)
    jpt_mf.postprocess_leaves()
    jpt_mf.save(os.path.join(locs.examples, 'robotaction', dt, f'MOVEFORWARD.tree'))

    logger.debug('...done!')


def learn_jpt_turn(dt):
    logger.debug('learning TURN JPT...')

    # learn discriminative JPT from data generated by test_data_curation for TURN
    data_turn = pd.read_csv(
        os.path.join(locs.examples, 'robotaction', dt, 'data', f'ALL-TURN.csv'),
        delimiter=',',
        header=0
    )
    turnvars = infer_from_dataframe(data_turn, scale_numeric_types=False)

    jpt_t = JPT(variables=turnvars, targets=turnvars[2:4], min_samples_leaf=FACTOR)

    jpt_t.learn(data_turn)
    jpt_t.postprocess_leaves()
    jpt_t.save(os.path.join(locs.examples, 'robotaction', dt, f'TURN.tree'))

    logger.debug('...done!')


def plot_jpt_moveforward(dt):
    jpt_mf = JPT.load(os.path.join(locs.examples, 'robotaction', dt, f'MOVEFORWARD.tree'))
    logger.debug('...done! Plotting MOVEFORWARD tree...')
    jpt_mf.plot(title='MOVEFORWARD',
                plotvars=jpt_mf.variables,
                filename=f'MOVEFORWARD',
                directory=os.path.join(locs.examples, 'robotaction', dt, 'plots'),
                leaffill='#CCDAFF',
                nodefill='#768ABE',
                alphabet=True
    )


def plot_jpt_turn(dt):
    jpt_t = JPT.load(os.path.join(locs.examples, 'robotaction', dt, f'TURN.tree'))
    logger.debug('...done! Plotting TURN tree...')
    jpt_t.plot(title='TURN',
               plotvars=jpt_t.variables,
               filename=f'TURN',
               directory=os.path.join(locs.examples, 'robotaction', dt, 'plots'),
               leaffill='#CCDAFF',
               nodefill='#768ABE',
               alphabet=True
    )


if __name__ == '__main__':
    init_loggers(level='debug')
    # DT = f'{datetime.datetime.now().strftime(FILESTRFMT)}'
    DT = recent_example(os.path.join(locs.examples, 'robotaction'))
    if not os.path.exists(os.path.join(locs.examples, 'robotaction', DT)):
        os.mkdir(os.path.join(locs.examples, 'robotaction', DT))
        os.mkdir(os.path.join(locs.examples, 'robotaction', DT, 'plots'))
        os.mkdir(os.path.join(locs.examples, 'robotaction', DT, 'data'))
    logger.debug(f'Running robotaction data generation with timestamp {DT}')

    # robot_pos_random(DT)
    # data_curation(DT)
    # learn_jpt_moveforward(DT)
    # learn_jpt_turn(DT)

    plot_jpt_moveforward(DT)
    plot_jpt_turn(DT)
